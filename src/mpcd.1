.TH MPCD 1 2023-05-22
.SH NAME
\fBmpcd\fR \(en report code clones
.SH SYNOPSIS
\fBmpcd\fR [\fB\-v\fR] [\fB\-n \fIclone-length\fR]
.SH DESCRIPTION
The \fBmpcd\fR utility reads from its standard input a stream
of file identifiers (e.g. file paths) prefixed with F,
followed by each file's tokens for each line in the range 0\^\(en\^699.
It reports on its standard output identified code clones.
Each clone is reported in the following format.
.RS
.TP
\(bu
One line containing the number of clones in the group and
the number of tokens in each group's element.
.TP
\(bu
One line for each clone group element containing
the start line, the end line, and the file identifier.
.TP
\(bu
A blank line.
.RE
All the above elements are tab-separated.


.SH OPTIONS
The behavior of the \fBmpcd\fR utility can be controlled
through the following command-line option.
.RS 3

.TP
.BI "-n " clone-length
Specify the minimum length of clones that will be detected.
The default value is 15.

.TP
.BI "-v "
Produce verbose output on the standard error with processing details.

.RE

.SH EXAMPLES
.PP
Identify clones in all Java files located in the \fCsrc\fP directory.

.ft C
.nf
find src -type f -name '*.java' -print0 |
while IFS= read -r -d '' file; do
  echo "F$file"
  tokenizer -l Java -o line -t N "$file"
done |
mpcd >results.txt
.ft P
.fi

Find clones in the \fCkernel\fP directory of the Linux kernel v6.3,
which is stored in a bare Git repository named \fClinux.git\fP.
Adjust clone size to 40 tokens and generate verbose output while processing.

.ft C
.nf
git --git-dir linux.git ls-tree -r --name-only v6.3 -- kernel |
grep '\.[ch]$' |
while read file; do
  echo "F$file"
  git --git-dir linux.git show "v6.3:$file" |
  tokenizer -l C -o line -t N
done |
mpcd -v -n 40 >results.txt
.ft P
.fi

.SH DIAGNOSTICS
None.

.SH SEE ALSO
.IR tokenizer (1)
\(em convert source code into integer vectors.

.SH AUTHORS
Written by Diomidis Spinellis.

.SH BUGS
For performance reasons no checks are made on the validity of the input
stream.
Invalid input may result in a crash.

Reported clones are regions that have the same tokens up to the specified
length,
extended to the end of the last line,
and then extended as a group line-by-line to cover as many tokens as
possible,
as long as all group members are the same.
No attempt is made to split groups into longer ones covering
differing regions.

Reported clones may overlap.
This may be a feature.
